type AmountSummary {
  count: Int!
  total: Float!
}

type Budget {
  category: Category!
  createdAt: Date!
  id: ID!
  lastTransactions: [LastTransaction!]!
  maximum: Float!
  theme: String!
  updatedAt: Date!
}

enum Category {
  Bills
  DiningOut
  Education
  Entertainment
  General
  Groceries
  Lifestyle
  PersonalCare
  Shopping
  Transportation
}

input CreateBudgetInput {
  category: Category!
  maximum: Float!
  theme: String!
}

input CreatePotInput {
  name: String!
  target: Float!
  theme: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

type LastTransaction {
  amount: Float!
  avatar: String!
  date: Date!
  id: ID!
  name: String!
}

type Mutation {
  addToPot(amount: Float!, id: String!): Pot
  createPot(input: CreatePotInput!): Pot
  deletePot(id: String!): Pot
  updatePot(id: String!, input: UpdatePotInput!): Pot
  withdrawFromPot(amount: Float!, id: String!): Pot
}

type Pot {
  createdAt: Date!
  id: ID!
  name: String!
  target: Float!
  theme: String!
  total: Float!
  updatedAt: Date!
}

type Query {
  budgets: [Budget!]!
  pots: [Pot!]!
  recentTransactions: [Transaction!]!
  recurringBills: RecurringBills!
  transactions: [Transaction!]!
  user: User
}

type RecurringBills {
  dueSoon: AmountSummary!
  paidBills: AmountSummary!
  recurringBills: [Transaction!]!
  totalBills: Float!
  totalUpcoming: AmountSummary!
}

type Transaction {
  amount: Float!
  avatar: String!
  category: Category!
  date: Date!
  id: ID!
  name: String!
  recurring: Boolean!
  user: User!
  userId: String!
}

input UpdatePotInput {
  name: String!
  target: Float!
  theme: String!
}

type User {
  email: String
  id: ID
  image: String
  name: String
}