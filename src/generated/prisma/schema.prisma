generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

generator pothos {
  provider     = "prisma-pothos-types"
  clientOutput = "./prisma"
  output       = "../src/generated/pothos-types.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        Int     @id @default(autoincrement())
  title     String
  content   String?
  published Boolean @default(false)
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?     @map("email_verified")
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  balance       Float         @default(0)
  income        Float         @default(0)
  expenses      Float         @default(0)
  transactions  Transaction[]
  budgets       Budget[]
  pots          Pot[]

  @@map("users")
}

model Transaction {
  id        String   @id @default(uuid())
  avatar    String
  name      String
  category  Category
  date      DateTime
  amount    Float
  recurring Boolean
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  @@map("transactions")
}

model Budget {
  id       String   @id @default(uuid())
  category Category
  maximum  Float
  theme    String
  user     User     @relation(fields: [userId], references: [id])
  userId   String

  @@map("budgets")
}

model Pot {
  id     String @id @default(uuid())
  name   String
  target Float
  total  Float
  theme  String
  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@map("pots")
}

enum Category {
  General        @map("General")
  DiningOut      @map("DiningOut")
  Groceries      @map("Groceries")
  Entertainment  @map("Entertainment")
  Transportation @map("Transportation")
  Shopping       @map("Shopping")
  Lifestyle      @map("Lifestyle")
  PersonalCare   @map("PersonalCare")
  Education      @map("Education")
  Bills          @map("Bills")
}
