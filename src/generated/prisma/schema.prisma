generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

generator pothos {
  provider     = "prisma-pothos-types"
  clientOutput = "./prisma"
  output       = "../src/generated/pothos-types.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(uuid())
  name          String
  email         String        @unique
  emailVerified Boolean?      @map("email_verified")
  password      String?
  image         String?
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @default(now()) @map("updated_at")
  sessions      Session[]
  accounts      Account[]
  transactions  Transaction[]
  budgets       Budget[]
  pots          Pot[]

  @@map("users")
}

model Session {
  id        String   @id @default(uuid())
  expiresAt DateTime @map("expires_at")
  token     String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Account {
  id                    String    @id @default(uuid())
  accountId             String    @map("account_id")
  providerId            String    @map("provider_id")
  userId                String    @map("user_id")
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?   @map("access_token")
  refreshToken          String?   @map("refresh_token")
  idToken               String?   @map("id_token")
  accessTokenExpiresAt  DateTime? @map("access_token_expires_at")
  refreshTokenExpiresAt DateTime? @map("refresh_token_expires_at")
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @default(now()) @map("updated_at")

  @@map("accounts")
}

model Verification {
  id         String    @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime  @map("expires_at")
  createdAt  DateTime? @default(now()) @map("created_at")
  updatedAt  DateTime? @default(now()) @map("updated_at")

  @@map("verifications")
}

model Transaction {
  id        String   @id @default(uuid())
  avatar    String
  name      String
  category  Category
  date      DateTime
  amount    Float
  recurring Boolean
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")

  @@map("transactions")
}

model Budget {
  id       String   @id @default(uuid())
  category Category
  maximum  Float
  theme    String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String   @map("user_id")

  @@map("budgets")
}

model Pot {
  id     String @id @default(uuid())
  name   String
  target Float
  total  Float
  theme  String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@map("pots")
}

enum Category {
  General        @map("General")
  DiningOut      @map("DiningOut")
  Groceries      @map("Groceries")
  Entertainment  @map("Entertainment")
  Transportation @map("Transportation")
  Shopping       @map("Shopping")
  Lifestyle      @map("Lifestyle")
  PersonalCare   @map("PersonalCare")
  Education      @map("Education")
  Bills          @map("Bills")
}
